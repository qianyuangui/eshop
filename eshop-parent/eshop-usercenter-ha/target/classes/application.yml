#spring:
#  application:
#    name: eshop-usercenter
server:
  port: 8181

spring:
  application:
    name: eshop-usercenter
#  datasource:
#    username: root
#    password: root
#    url: jdbc:mysql://10.100.100.203:3306/ftowntest3?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
#    driver-class-name: com.mysql.jdbc.Driver
  redis:
    host: 10.100.100.203
    database: 2 # Redis数据库索引（默认为0）,如果设置为1，那么存入的key-value都存放在select 1中
    port: 6379
    max-wait: 30000    # 连接池最大阻塞等待时间（使用负值表示没有限制）
    max-active: 100   # 连接池最大连接数（使用负值表示没有限制）
    max-idle: 20     # 连接池中的最大空闲连接
    min-idle: 0     # 连接池中的最小空闲连接
    timeout: 5000   # 连接超时
    #password: 123456 # 密码,默认密码为空
    #cluster:       # 集群配置
      #nodes: 127.0.0.1:6381,127.0.0.1:6382,127.0.0.1:6383,127.0.0.1:6384,127.0.0.1:6385,127.0.0.1:6386
      #max-redirects: 2  # 最大重定向次数
sharding:
  jdbc:
    datasource:
      names: ds0,ds1
      ds0: 
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://10.100.100.203:3306/order1
        username: root
        password: root        
      ds1: 
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://10.100.100.203:3306/order2
        username: root
        password: root
    config:
      sharding:
        props:
          sql.show: true
        tables:
          t_user:  #t_user表
            key-generator-column-name: id  #主键
            actual-data-nodes: ds${0..1}.t_user${0..1}  #数据节点
            database-strategy:  #分库策略
              inline:
                sharding-column: city_id   
                algorithm-expression: ds${city_id % 2}
            table-strategy:  #分表策略
              inline:
                shardingColumn: sex
                algorithm-expression: t_user${sex % 2}
          t_address: 
            key-generator-column-name: id
            actual-data-nodes: ds${0..1}.t_address
            database-strategy: 
              inline:
                shardingColumn: lit
                algorithm-expression: ds${lit % 2}
mybatis:
  #mapper-locations: classpath:mapping/*Mapper.xml
  mapper-locations: classpath:mybatis/*Mapper.xml
  type-aliases-package: com.ftown.eshop
  
eureka: 
  client: 
    registerWithEureka: true #是否向服务注册中心注册自己
    fetchRegistry: true #是否检索服务
    serviceUrl: #服务注册中心的配置内容，指定服务注册中心的位置
      defaultZone: http://eureka2001.hmc.com:8081/eureka/,http://eureka2002.hmc.com:8082/eureka/,http://eureka2003.hmc.com:8083/eureka/ # 集群
  instance:
    leaseRenewalIntervalInSeconds: 10
    leaseExpirationDurationInSeconds: 30
hystrix:
  command:
    default:  #default全局有效，service id指定应用有效
      execution:
        timeout:
          #如果enabled设置为false，则请求超时交给ribbon控制,为true,则超时作为熔断根据
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 2000 #断路器超时时间，默认1000ms

feign:
  hystrix:
    enabled: true          
  client:
    config:
      default:
        connectTimeout: 5000 # feign 的超时设置
        readTimeout: 5000